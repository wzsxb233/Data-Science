parameter=list(supp=0.005, conf=0.55), #with lhs predicting bottled beer
control=list(verbose=F),#verbose is off
appearance=list(default="lhs",rhs=("Bad")))
rules3 <- apriori(mtmatr, #creating a rule set for myGroc, with support value at 0.0006, conf0.55
parameter=list(supp=0.005, conf=0.55), #with lhs predicting bottled beer
control=list(verbose=F),#verbose is off
appearance=list(default="lhs",rhs=("mpg")))
rules3 <- apriori(mtmatr, #creating a rule set for myGroc, with support value at 0.0006, conf0.55
parameter=list(supp=0.005, conf=0.55), #with lhs predicting bottled beer
control=list(verbose=F),#verbose is off
appearance=list(default="lhs",rhs=(Bad)))
rules3 <- apriori(mtmatr, #creating a rule set for myGroc, with support value at 0.0006, conf0.55
parameter=list(supp=0.005, conf=0.55), #with lhs predicting bottled beer
control=list(verbose=F),#verbose is off
appearance=list(default="lhs",rhs=("Bad")))
library(caret)#put caret into library
library(kernlab)#put kernlab into library
library(e1071)#put e1071 into library
library(ggplot2)#put ggplot2 into library
#1
diamondHW<-data(diamonds)
force(diamonds)
force(diamonds)
data("diamonds")#gain the data from diamonds
force(diamonds)
View(diamonds)
View(diamonds)
data("diamonds")#gain the data from diamonds
data("diamonds")#gain the data from diamonds
force(diamonds)
diaData<-diamonds[cut="Premium"/cut="Ideal",]
force(diamonds)#forcing getting the diamonds data
diaData<-diamonds[cut=="Premium"||cut=="Ideal",]
diaData<-diamonds[cut=="Premium"||"Ideal",]
diaData<-diamonds[cut="Premium",]
force(diamonds)#forcing getting the diamonds data
diaData<-diamonds[cut=="Premium",]
diaData<-diamonds[,cut=="Premium"]
diaData<-diamonds
diaData<-diamonds[cut="Premium",]
diaData<-diamonds#creating a diaData dataset for diamonds data
diaData<-diaData[cut=="Premium",]
diaData<-diaData[,cut=="Premium"]
diaData<-diaData[diaData$cut=="Premium"||diaData$cut=="ideal",]#
View(diaData)
diaData<-diaData[",diaData$cut=="Premium"||diaData$cut=="ideal]#
diaData<-diaData[,diaData$cut=="Premium"||diaData$cut=="ideal"]#
diaData<-diaData[diaData$cut=="Premium",]#
diaData<-diamonds[diamonds$cut=="Premium"||diamonds$cut=="ideal",]#
diaData<-diamonds[diamonds$cut=="Premium"||diamonds$cut=="Ideal",]#
View(diaData)
diaData<-diamonds[diamonds$cut=="Premium",]
diaData<-diamonds[(diamonds$cut=="Premium"||diamonds$cut=="Ideal"),]#
diaData<-diamonds[(diamonds$cut=="Premium"|diamonds$cut=="Ideal"),]#
View(diaData)
diaData$cut<-as.factor(diaData$cut)#put the cut variable of diaData into factor
str(diaData)#check the struture of diaData
View(diaData)
e struture of diaData
str(diamonds)
diaData$cut<-as.character(diaData$cut)#put the cut variable into char
diaData$cut<-as.factor(diaData$cut)#put the cut variable of diaData into factor
str(diaData)#check the struture of diaData
View(diaData)
diaData$cut<-toString(diaData$cut)#put the cut variable into char
diaData$cut<-as.factor(diaData$cut)#put the cut variable of diaData into factor
str(diaData)#check the struture of diaData
data("diamonds")#gain the data from diamonds
force(diamonds)#forcing getting the diamonds data
#B
diaData<-diamonds[(diamonds$cut=="Premium"|diamonds$cut=="Ideal"),]#extracing ideal or premium cut data
#C
diaData$cut<-as.character(diaData$cut)#put the cut variable into char
diaData$cut<-as.factor(diaData$cut)#put the cut variable of diaData into factor
str(diaData)#check the struture of diaData
diaData$clarity<-as.numeric(diaData$clarity)#change the clarity into number
diaData$color<-as.numeric(diaData$color)#change the color into number
str(diaData)#see the diaData's structure
trainList<-createDataPartition(y=diaData$cut,p=.40,list=FALSE)#create a trainList consisting of 0.4
#portion of the data's index
trainSet<-diaData[trainList,]#creating trainSet
trainList<-createDataPartition(y=diaData$cut,p=.60,list=FALSE)#create a trainList consisting of 0.4
#portion of the data's index
trainSet<-diaData[trainList,]#creating trainSet
testSet<-diaData[-trainList,]#creating testSet
View(testSet)
View(trainSet)
View(testSet)
View(trainSet)
View(diaData)
View(testSet)
#G
dim(trainSet)#see the dimension of trainSet
dim(testSet)#see the dimension of testSet
#all good
svmDiamond<- ksvm(Class~.,data=trainSet,kernel="rbfdot",kpar="automatic",C=5, cross=3,prob.model=TRUE)#train a svm
#using variables predicting class of cost=5, cross=3
svmDiamond<- ksvm(cut~.,data=trainSet,kernel="rbfdot",kpar="automatic",C=5, cross=3,prob.model=TRUE)#train a svm
#using variables predicting class of cost=5, cross=3
svmDiamond<- ksvm(cut~.,data=trainSet,kernel="rbfdot",kpar="automatic",C=5, cross=3,prob.model=TRUE)#train a svm
#using variables predicting class of cost=5, cross=3
svmDiamond#run the model and see the contribute
svmPred<-predict(svmDiamond,testSet,type="response")#use the model to predict testSet
str(svmPred)#see the structure of svmPred
str(svmPred)#see the structure of svmPred, it is good
head(svmPred)#see the head elements of svmPred
compTable<-data.frame(testSet[,2],svmPred)#create compTable for testSet
table(compTable)#see the confusionMatrix of pred data
(493+547)/(8127+4869)#calculate the error rate
confusionMatrix(table(compTable))#using confusionMatrix to calculate the error rate
lmDiamonds<-lm(formula=cut~.,data=diaData)#creating linear model using all other variable predicting
#cut
View(lmDiamonds)
lmPred<-predict(lmDiamonds,testSet,type="response")#using lm to predict
table(lmPred)
amydata.list <- fromJSON("completeSurvey.json") #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
summary(survey)
str(survey) # start to get to know your data...many more get to know your data funcitons needed
data <- fastDummies::dummy_cols(survey, select_columns = "Gender")
data <- fastDummies::dummy_cols(data, select_columns = "Class")
data <- fastDummies::dummy_cols(data, select_columns = "Type.of.Travel")
data$TotalTripTime <- data$Flight.time.in.minutes + data$Arrival.Delay.in.Minutes
data$LongFlight <- ifelse(data$Flight.time.in.minutes > 60, 1, 0)
data$LongTrip <- ifelse(data$TotalTripTime > 60, 1, 0)
data$Promotors <- ifelse(data$Likelihood.to.recommend > 8, 1, 0)
data$Detractors <- ifelse(data$Likelihood.to.recommend < 7, 1, 0)
data$Flight.cancelled <- ifelse(data$Flight.cancelled=="No",0,1)
data[is.na(data)] <- 0
airlinecountplot <- ggplot(data, aes(x=Partner.Name, fill=Partner.Name)) + geom_bar(identity="count") + coord_flip() + theme_bw() + theme(legend.position = "none") + ggtitle("Count of Each Partner Airline") + xlab("Count") + ylab("Partner Airline Name")
airlinecountplot
TotalTripHist <- ggplot(data, aes(TotalTripTime)) + geom_histogram(color="black", fill="mediumpurple") + xlim(0,600) + ggtitle("Histogram Depicting the Total Time for Trips") + ylab("Count") + xlab("Time (in minutes)") + theme_bw()
TotalTripHist
TravelTypeScore <- ggplot(data, aes(x=Type.of.Travel, y=Likelihood.to.recommend, fill=Type.of.Travel)) + geom_boxplot() + theme_bw() +facet_wrap(~Gender) + theme(axis.text.x = element_blank()) + ylab("Recommendation Score") + xlab("Travel Type") + ggtitle("Likelihood to Recommend based on Gender and Travel Type")
TravelTypeScore
AirlineScores <- ggplot(data, aes(x=Partner.Name, y=Likelihood.to.recommend, fill=Partner.Name)) + geom_boxplot() + theme_bw() + theme(axis.text.x = element_blank()) + ylab("Recommendation Score") + xlab("Airline") + ggtitle("Likelihood to Recommend based on Airline")
AirlineScores
amydata.list <- fromJSON("completeSurvey.json") #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
summary(survey)
str(survey) # start to get to know your data...many more get to know your data funcitons needed
data <- fastDummies::dummy_cols(survey, select_columns = "Gender")
data <- fastDummies::dummy_cols(data, select_columns = "Class")
data <- fastDummies::dummy_cols(data, select_columns = "Type.of.Travel")
data$TotalTripTime <- data$Flight.time.in.minutes + data$Arrival.Delay.in.Minutes
data$LongFlight <- ifelse(data$Flight.time.in.minutes > 60, 1, 0)
data$LongTrip <- ifelse(data$TotalTripTime > 60, 1, 0)
data$Promotors <- ifelse(data$Likelihood.to.recommend > 8, 1, 0)
data$Detractors <- ifelse(data$Likelihood.to.recommend < 7, 1, 0)
data$Flight.cancelled <- ifelse(data$Flight.cancelled=="No",0,1)
data[is.na(data)] <- 0
airlinecountplot <- ggplot(data, aes(x=Partner.Name, fill=Partner.Name)) + geom_bar(identity="count") + coord_flip() + theme_bw() + theme(legend.position = "none") + ggtitle("Count of Each Partner Airline") + xlab("Count") + ylab("Partner Airline Name")
airlinecountplot
TotalTripHist <- ggplot(data, aes(TotalTripTime)) + geom_histogram(color="black", fill="mediumpurple") + xlim(0,600) + ggtitle("Histogram Depicting the Total Time for Trips") + ylab("Count") + xlab("Time (in minutes)") + theme_bw()
TotalTripHist
TravelTypeScore <- ggplot(data, aes(x=Type.of.Travel, y=Likelihood.to.recommend, fill=Type.of.Travel)) + geom_boxplot() + theme_bw() +facet_wrap(~Gender) + theme(axis.text.x = element_blank()) + ylab("Recommendation Score") + xlab("Travel Type") + ggtitle("Likelihood to Recommend based on Gender and Travel Type")
TravelTypeScore
AirlineScores <- ggplot(data, aes(x=Partner.Name, y=Likelihood.to.recommend, fill=Partner.Name)) + geom_boxplot() + theme_bw() + theme(axis.text.x = element_blank()) + ylab("Recommendation Score") + xlab("Airline") + ggtitle("Likelihood to Recommend based on Airline")
AirlineScores
ggsave("AirlineScores.jpeg", AirlineScores)
library(RCurl)#put the RCurl in library
library(jsonlite)#put the jsonlite in library
library(stringr)#put the stringr in library
library(ggplot2)#put ggplot2 into library
amydata.list <- fromJSON("completeSurvey.json") #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
summary(survey)
str(survey) # start to get to know your data...many more get to know your data funcitons needed
data <- fastDummies::dummy_cols(survey, select_columns = "Gender")
data <- fastDummies::dummy_cols(data, select_columns = "Class")
data <- fastDummies::dummy_cols(data, select_columns = "Type.of.Travel")
data$TotalTripTime <- data$Flight.time.in.minutes + data$Arrival.Delay.in.Minutes
data$LongFlight <- ifelse(data$Flight.time.in.minutes > 60, 1, 0)
data$LongTrip <- ifelse(data$TotalTripTime > 60, 1, 0)
data$Promotors <- ifelse(data$Likelihood.to.recommend > 8, 1, 0)
data$Detractors <- ifelse(data$Likelihood.to.recommend < 7, 1, 0)
data$Flight.cancelled <- ifelse(data$Flight.cancelled=="No",0,1)
data[is.na(data)] <- 0
airlinecountplot <- ggplot(data, aes(x=Partner.Name, fill=Partner.Name)) + geom_bar(identity="count") + coord_flip() + theme_bw() + theme(legend.position = "none") + ggtitle("Count of Each Partner Airline") + xlab("Count") + ylab("Partner Airline Name")
airlinecountplot
TotalTripHist <- ggplot(data, aes(TotalTripTime)) + geom_histogram(color="black", fill="mediumpurple") + xlim(0,600) + ggtitle("Histogram Depicting the Total Time for Trips") + ylab("Count") + xlab("Time (in minutes)") + theme_bw()
TotalTripHist
TravelTypeScore <- ggplot(data, aes(x=Type.of.Travel, y=Likelihood.to.recommend, fill=Type.of.Travel)) + geom_boxplot() + theme_bw() +facet_wrap(~Gender) + theme(axis.text.x = element_blank()) + ylab("Recommendation Score") + xlab("Travel Type") + ggtitle("Likelihood to Recommend based on Gender and Travel Type")
TravelTypeScore
AirlineScores <- ggplot(data, aes(x=Partner.Name, y=Likelihood.to.recommend, fill=Partner.Name)) + geom_boxplot() + theme_bw() + theme(axis.text.x = element_blank()) + ylab("Recommendation Score") + xlab("Airline") + ggtitle("Likelihood to Recommend based on Airline")
AirlineScores
library(RCurl)#put the RCurl in library
library(jsonlite)#put the jsonlite in library
library(stringr)#put the stringr in library
library(ggplot2)#put ggplot2 into library
mydata.list <- fromJSON("completeSurvey.json") #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
summary(survey)
str(survey) # start to get to know your data...many more get to know your data funcitons needed
data <- fastDummies::dummy_cols(survey, select_columns = "Gender")
data <- fastDummies::dummy_cols(data, select_columns = "Class")
data <- fastDummies::dummy_cols(data, select_columns = "Type.of.Travel")
data$TotalTripTime <- data$Flight.time.in.minutes + data$Arrival.Delay.in.Minutes
data$LongFlight <- ifelse(data$Flight.time.in.minutes > 60, 1, 0)
data$LongTrip <- ifelse(data$TotalTripTime > 60, 1, 0)
data$Promotors <- ifelse(data$Likelihood.to.recommend > 8, 1, 0)
data$Detractors <- ifelse(data$Likelihood.to.recommend < 7, 1, 0)
data$Flight.cancelled <- ifelse(data$Flight.cancelled=="No",0,1)
data[is.na(data)] <- 0
airlinecountplot <- ggplot(data, aes(x=Partner.Name, fill=Partner.Name)) + geom_bar(identity="count") + coord_flip() + theme_bw() + theme(legend.position = "none") + ggtitle("Count of Each Partner Airline") + xlab("Count") + ylab("Partner Airline Name")
airlinecountplot
TotalTripHist <- ggplot(data, aes(TotalTripTime)) + geom_histogram(color="black", fill="mediumpurple") + xlim(0,600) + ggtitle("Histogram Depicting the Total Time for Trips") + ylab("Count") + xlab("Time (in minutes)") + theme_bw()
TotalTripHist
TravelTypeScore <- ggplot(data, aes(x=Type.of.Travel, y=Likelihood.to.recommend, fill=Type.of.Travel)) + geom_boxplot() + theme_bw() +facet_wrap(~Gender) + theme(axis.text.x = element_blank()) + ylab("Recommendation Score") + xlab("Travel Type") + ggtitle("Likelihood to Recommend based on Gender and Travel Type")
TravelTypeScore
AirlineScores <- ggplot(data, aes(x=Partner.Name, y=Likelihood.to.recommend, fill=Partner.Name)) + geom_boxplot() + theme_bw() + theme(axis.text.x = element_blank()) + ylab("Recommendation Score") + xlab("Airline") + ggtitle("Likelihood to Recommend based on Airline")
AirlineScores
ggsave("AirlineScores.jpeg", AirlineScores)
library(RCurl)#put the RCurl in library
library(jsonlite)#put the jsonlite in library
library(stringr)#put the stringr in library
library(ggplot2)#put ggplot2 into library
mydata.list <- fromJSON("completeSurvey.json") #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
summary(survey)
str(survey) # start to get to know your data...many more get to know your data funcitons needed
data <- fastDummies::dummy_cols(survey, select_columns = "Gender")
data <- fastDummies::dummy_cols(data, select_columns = "Class")
data <- fastDummies::dummy_cols(data, select_columns = "Type.of.Travel")
data$TotalTripTime <- data$Flight.time.in.minutes + data$Arrival.Delay.in.Minutes
data$LongFlight <- ifelse(data$Flight.time.in.minutes > 60, 1, 0)
data$LongTrip <- ifelse(data$TotalTripTime > 60, 1, 0)
data$Promotors <- ifelse(data$Likelihood.to.recommend > 8, 1, 0)
data$Detractors <- ifelse(data$Likelihood.to.recommend < 7, 1, 0)
data$Flight.cancelled <- ifelse(data$Flight.cancelled=="No",0,1)
data[is.na(data)] <- 0
airlinecountplot <- ggplot(data, aes(x=Partner.Name, fill=Partner.Name)) + geom_bar(identity="count") + coord_flip() + theme_bw() + theme(legend.position = "none") + ggtitle("Count of Each Partner Airline") + xlab("Count") + ylab("Partner Airline Name")
airlinecountplot
TotalTripHist <- ggplot(data, aes(TotalTripTime)) + geom_histogram(color="black", fill="mediumpurple") + xlim(0,600) + ggtitle("Histogram Depicting the Total Time for Trips") + ylab("Count") + xlab("Time (in minutes)") + theme_bw()
TotalTripHist
TravelTypeScore <- ggplot(data, aes(x=Type.of.Travel, y=Likelihood.to.recommend, fill=Type.of.Travel)) + geom_boxplot() + theme_bw() +facet_wrap(~Gender) + theme(axis.text.x = element_blank()) + ylab("Recommendation Score") + xlab("Travel Type") + ggtitle("Likelihood to Recommend based on Gender and Travel Type")
TravelTypeScore
AirlineScores <- ggplot(data, aes(x=Partner.Name, y=Likelihood.to.recommend, fill=Partner.Name)) + geom_boxplot() + theme_bw() + theme(axis.text.x = element_blank()) + ylab("Recommendation Score") + xlab("Airline") + ggtitle("Likelihood to Recommend based on Airline")
AirlineScores
ggsave("AirlineScores.jpeg", AirlineScores)
library(RCurl)#put the RCurl in library
library(jsonlite)#put the jsonlite in library
library(stringr)#put the stringr in library
library(ggplot2)#put ggplot2 into library
mydata.list <- fromJSON("completeSurvey.json") #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
mydata.list <- fromJSON("completeSurvey.json" ) #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
str(survey) # start to get to know your data...many more get to know your data funcitons needed
mydata.list <- jsonlite::fromJSON("completeSurvey.json" ) #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
str(survey) # start to get to know your data...many more get to know your data funcitons needed
mydata.list <- jsonlite::fromJSON("completeSurvey.json" ) #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
str(survey) # start to get to know your data...many more get to know your data funcitons needed
mydata.list <- jsonlite::fromJSON("completeSurvey.Json" ) #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
str(survey) # start to get to know your data...many more get to know your data funcitons needed
str(survey) # start to get to know your data...many more get to know your data funcitons needed
mydata.list <- jsonlite::fromJSON("completeSurvey.json" ) #read in the json file called completeSurvey.json
mydata.list <- jsonlite::fromJSON(completeSurvey.json ) #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
str(survey) # start to get to know your data...many more get to know your data funcitons needed
mydata.list <- jsonlite::fromJSON("completeSurvey.json") #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
str(survey) # start to get to know your data...many more get to know your data funcitons needed
datajson<-getURL("https://blackboard.syracuse.edu/bbcswebdav/pid-6426142-dt-content-rid-56125809_1/xid-56125809_1")#get data from url
datajson<-getURL("http://blackboard.syracuse.edu/bbcswebdav/pid-6426142-dt-content-rid-56125809_1/xid-56125809_1")#get data from url
mydata.list <- jsonlite::fromJSON(datajson) #read in the json file called completeSurvey.json
mydata.list <- jsonlite::fromJSON(datajson) #read in the json file called completeSurvey.json
mydata.list <- jsonlite::fromJSON(completeSurvey.json) #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
str(survey) # start to get to know your data...many more get to know your data funcitons needed
mydata.list <- jsonlite::fromJSON("completeSurvey.json")
mydata.list <- jsonlite::fromJSON("completeSurvey.json")
mydata.list <- jsonlite::fromJSON("completeSurvey.json")
mydata.list <- jsonlite::fromJSON("completeSurvey.json")
mydata.list <- jsonlite::fromJSON("completeSurvey.json")
mydata.list <- jsonlite::fromJSON("cOmpleteSurvey.json") #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
str(survey) # start to get to know your data...many more get to know your data funcitons needed
mydata.list <- jsonlite::fromJSON("completeSurvey.json") #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
mydata.list <- jsonlite::fromJSON("completeSurvey.json") #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
str(survey) # start to get to know your data...many more get to know your data funcitons needed
setwd("~/")
setwd("C:/Users/gg/Desktop/SU FALL2020/IST687")
mydata.list <- jsonlite::fromJSON("completeSurvey.json") #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
str(survey) # start to get to know your data...many more get to know your data funcitons needed
data <- fastDummies::dummy_cols(survey, select_columns = "Gender")
data <- fastDummies::dummy_cols(data, select_columns = "Class")
data <- fastDummies::dummy_cols(data, select_columns = "Type.of.Travel")
data$TotalTripTime <- data$Flight.time.in.minutes + data$Arrival.Delay.in.Minutes
data$LongFlight <- ifelse(data$Flight.time.in.minutes > 60, 1, 0)
data$LongTrip <- ifelse(data$TotalTripTime > 60, 1, 0)
data$Promotors <- ifelse(data$Likelihood.to.recommend > 8, 1, 0)
data$Detractors <- ifelse(data$Likelihood.to.recommend < 7, 1, 0)
data$Flight.cancelled <- ifelse(data$Flight.cancelled=="No",0,1)
data[is.na(data)] <- 0
airlinecountplot <- ggplot(data, aes(x=Partner.Name, fill=Partner.Name)) + geom_bar(identity="count") + coord_flip() + theme_bw() + theme(legend.position = "none") + ggtitle("Count of Each Partner Airline") + xlab("Count") + ylab("Partner Airline Name")
airlinecountplot
TotalTripHist <- ggplot(data, aes(TotalTripTime)) + geom_histogram(color="black", fill="mediumpurple") + xlim(0,600) + ggtitle("Histogram Depicting the Total Time for Trips") + ylab("Count") + xlab("Time (in minutes)") + theme_bw()
TotalTripHist
TravelTypeScore <- ggplot(data, aes(x=Type.of.Travel, y=Likelihood.to.recommend, fill=Type.of.Travel)) + geom_boxplot() + theme_bw() +facet_wrap(~Gender) + theme(axis.text.x = element_blank()) + ylab("Recommendation Score") + xlab("Travel Type") + ggtitle("Likelihood to Recommend based on Gender and Travel Type")
TravelTypeScore
AirlineScores <- ggplot(data, aes(x=Partner.Name, y=Likelihood.to.recommend, fill=Partner.Name)) + geom_boxplot() + theme_bw() + theme(axis.text.x = element_blank()) + ylab("Recommendation Score") + xlab("Airline") + ggtitle("Likelihood to Recommend based on Airline")
AirlineScores
ggsave("AirlineScores.jpeg", AirlineScores)
install.packages("fastDummies")#install fastDummies
library(fastDummies)
mydata.list <- jsonlite::fromJSON("completeSurvey.json") #read in the json file called completeSurvey.json
survey <- data.frame(mydata.list) # Convert json file to a data.fram
str(survey) # start to get to know your data...many more get to know your data funcitons needed
data <- fastDummies::dummy_cols(survey, select_columns = "Gender")
data <- fastDummies::dummy_cols(data, select_columns = "Class")
data <- fastDummies::dummy_cols(data, select_columns = "Type.of.Travel")
data$TotalTripTime <- data$Flight.time.in.minutes + data$Arrival.Delay.in.Minutes
data$LongFlight <- ifelse(data$Flight.time.in.minutes > 60, 1, 0)
data$LongTrip <- ifelse(data$TotalTripTime > 60, 1, 0)
data$Promotors <- ifelse(data$Likelihood.to.recommend > 8, 1, 0)
data$Detractors <- ifelse(data$Likelihood.to.recommend < 7, 1, 0)
data$Flight.cancelled <- ifelse(data$Flight.cancelled=="No",0,1)
data[is.na(data)] <- 0
airlinecountplot <- ggplot(data, aes(x=Partner.Name, fill=Partner.Name)) + geom_bar(identity="count") + coord_flip() + theme_bw() + theme(legend.position = "none") + ggtitle("Count of Each Partner Airline") + xlab("Count") + ylab("Partner Airline Name")
airlinecountplot
TotalTripHist <- ggplot(data, aes(TotalTripTime)) + geom_histogram(color="black", fill="mediumpurple") + xlim(0,600) + ggtitle("Histogram Depicting the Total Time for Trips") + ylab("Count") + xlab("Time (in minutes)") + theme_bw()
TotalTripHist
TravelTypeScore <- ggplot(data, aes(x=Type.of.Travel, y=Likelihood.to.recommend, fill=Type.of.Travel)) + geom_boxplot() + theme_bw() +facet_wrap(~Gender) + theme(axis.text.x = element_blank()) + ylab("Recommendation Score") + xlab("Travel Type") + ggtitle("Likelihood to Recommend based on Gender and Travel Type")
TravelTypeScore
AirlineScores <- ggplot(data, aes(x=Partner.Name, y=Likelihood.to.recommend, fill=Partner.Name)) + geom_boxplot() + theme_bw() + theme(axis.text.x = element_blank()) + ylab("Recommendation Score") + xlab("Airline") + ggtitle("Likelihood to Recommend based on Airline")
AirlineScores
ggsave("AirlineScores.jpeg", AirlineScores)
View(data)
View(survey)
us<-map_data("state")#get state map data into us
View(us)
library(ggmap)
airports <- unique(c(data$Origin.City,data$Destination.City))
airports <- unique(c(data$Origin.City,data$Destination.City))#get the flight city
coords <- geocode(airports)#get the geocode of flight city
str(data)#see data structure
View(survey)
str(survey)#see data structure
mappingdata<-data#copy data into mapping data
mappingdata$Destination.City<-as.character(mappingdata$Destination.City)#convert des city into char
mappingdata$Origin.City<-as.character(mappingdata$Origin.City)#convert ori city into char
mappingdata$Destination.City<-as.character(mappingdata$Destination.City)#convert des city into char
mappingdata$Origin.City<-as.character(mappingdata$Origin.City)#convert ori city into char
airports <- unique(c(mappingdata$Origin.City,mappingdata$Destination.City))#get the flight city
coords <- geocode(airports)#get the geocode of flight city
register_google(key = "[your key]", write = TRUE)#set the google api key
coords <- geocode(airports)#get the geocode of flight city
register_google(key = "[AIzaSyBCVcJDlma8PiUI9qm878X7KZC4aoeZkhA]", write = TRUE)#set the google api key
coords <- geocode(airports)#get the geocode of flight city
register_google(key = "AIzaSyBCVcJDlma8PiUI9qm878X7KZC4aoeZkhA", write = TRUE)#set the google api key
coords <- geocode(airports)#get the geocode of flight city
register_google(key = "AIzaSyBCVcJDlma8PiUI9qm878X7KZC4aoeZkhA", write = TRUE)#set the google api key
coords <- geocode(airports)#get the geocode of flight city
register_google(key = "AIzaSyBCVcJDlma8PiUI9qm878X7KZC4aoeZkhA", write = TRUE)#set the google api key
coords <- geocode(airports)#get the geocode of flight city
register_google(key = "AIzaSyBCVcJDlma8PiUI9qm878X7KZC4aoeZkhA", write = TRUE)#set the google api key
coords <- geocode(airports)#get the geocode of flight city
register_google(key = "AIzaSyBCVcJDlma8PiUI9qm878X7KZC4aoeZkhA", write = TRUE)#set the google api key
coords <- geocode(airports)#get the geocode of flight city
View(coords)
register_google(key = "AIzaSyBCVcJDlma8PiUI9qm878X7KZC4aoeZkhA", write = TRUE)#set the google api key
coords <- geocode(airports)#get the geocode of flight city
View(coords)
airports <- data.frame(airport=airports, coords)#create airport information
mappingdata <- merge(mappingdata, airports, by.x="Destination.City", by.y="airport")#merge from
mappingdata <- merge(mappingdata, airports, by.x="Origin.City", by.y="airport")#merge to
install.packages("ggrepe1")#install ggrepe1
library(ggrepel)
install.packages("ggrepe2")#install ggrepe1
library(ggrepe2)
worldmap <- borders("world", colour="#efede1", fill="#efede1") # create a layer of borders
statemap <- borders("state", colour="#efede1", fill="#efede1") # create a layer of borders
ggplot() + statemap +
geom_curve(data=mappingdata, aes(x = lon.x, y = lat.x, xend = lon.y, yend = lat.y), col = "#b29e7d", size = 1, curvature = .2) +
geom_point(data=airports, aes(x = lon, y = lat), col = "#970027") +
geom_text_repel(data=airports, aes(x = lon, y = lat, label = airport), col = "black", size = 2, segment.color = NA) +
theme(panel.background = element_rect(fill="white"),
axis.line = element_blank(),
axis.text.x = element_blank(),
axis.text.y = element_blank(),
axis.ticks = element_blank(),
axis.title.x = element_blank(),
axis.title.y = element_blank()
)
usMap <- borders("state", colour="grey", fill="white")# create a layer of borders
ggplot() + statemap +
)
ggplot() + usMap#show the map
allUSA <- ggplot() + usMap +
geom_curve(data=mappingdata,
aes(x=flon, y=flat, xend=tlon, yend=tlat),
col="#00008b",
size=.5,
curvature=0.2) +
geom_point(data=mappingdata,
aes(x=flon, y=flat),
colour="blue",
size=1.5) +
geom_point(data=mappingdata,
aes(x=tlon, y=tlat),
colour="blue") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks=element_blank(),
plot.title=element_text(hjust=0.5, size=12)) +
ggtitle("Migration Map: Three Generations of Adult Decendants of Walter F. Herget, Pekin, IL")
allUSA
View(mappingdata)
View(airports)
allUSA <- ggplot() + usMap +
geom_curve(data=mappingdata,
aes(x=lon.y, y=lat.y, xend=lon.x, yend=lat.x),
col="#00008b",
size=.5,
curvature=0.2) +
geom_point(data=mappingdata,
aes(x=lon.y, y=lat.y),
colour="blue",
size=1.5) +
geom_point(data=mappingdata,
aes(x=lon.x, y=lat.x),
colour="red") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks=element_blank(),
plot.title=element_text(hjust=0.5, size=12)) +
ggtitle("Migration Map: Three Generations of Adult Decendants of Walter F. Herget, Pekin, IL")
allUSA
worldMap <- borders("world", colour="grey", fill="white")# create a layer of borders
ggplot() + worldMap#show the map
allUSA <- ggplot() + usMap +
geom_curve(data=mappingdata,
aes(x=lon.y, y=lat.y, xend=lon.x, yend=lat.x),
col="#00008b",
size=.5,
curvature=0.2) +
geom_point(data=mappingdata,
aes(x=lon.y, y=lat.y),
colour="blue",
size=1.5) +
geom_point(data=mappingdata,
aes(x=lon.x, y=lat.x),
colour="red") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks=element_blank(),
plot.title=element_text(hjust=0.5, size=12)) +
ggtitle("Airline Mapping")
allUSA
worldMap <- borders("world", colour="grey", fill="white")# create a layer of borders
ggplot() + worldMap#show the map
allUSA <- ggplot() + worldMap +
geom_curve(data=mappingdata,
aes(x=lon.y, y=lat.y, xend=lon.x, yend=lat.x),
col="#00008b",
size=.5,
curvature=0.2) +
geom_point(data=mappingdata,
aes(x=lon.y, y=lat.y),
colour="blue",
size=1.5) +
geom_point(data=mappingdata,
aes(x=lon.x, y=lat.x),
colour="red") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks=element_blank(),
plot.title=element_text(hjust=0.5, size=12)) +
ggtitle("Airline Mapping")
allUSA
View(mappingdata)
allUSA <- ggplot() + worldMap +
geom_curve(data=mappingdata,
aes(x=lon.y, y=lat.y, xend=lon.x, yend=lat.x, col=Likelihood.to.recommend),
size=.5,
curvature=0.2) +
geom_point(data=mappingdata,
aes(x=lon.y, y=lat.y),
colour="blue",
size=1.5) +
geom_point(data=mappingdata,
aes(x=lon.x, y=lat.x),
colour="red") +
theme(axis.line=element_blank(),
axis.text.x=element_blank(),
axis.text.y=element_blank(),
axis.title.x=element_blank(),
axis.title.y=element_blank(),
axis.ticks=element_blank(),
plot.title=element_text(hjust=0.5, size=12)) +
ggtitle("Airline Mapping")
allUSA
View(survey)
